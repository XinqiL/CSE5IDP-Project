// Import the functions you need
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.3.0/firebase-app.js";
import {
  getFirestore,
  collection,
  doc,
  getDoc,
  addDoc,
  setDoc,
  getDocs,
  deleteDoc,
  orderBy,
} from "https://www.gstatic.com/firebasejs/10.3.0/firebase-firestore.js";
import {
  getAuth,
  createUserWithEmailAndPassword,
} from "https://www.gstatic.com/firebasejs/10.3.0/firebase-auth.js";

// Firebase config
const firebaseConfig = {
  apiKey: "AIzaSyC2560pETTPekmI-ABPf_xZ3M3UB6ZqMK4",
  authDomain: "message-display-system.firebaseapp.com",
  projectId: "message-display-system",
  storageBucket: "message-display-system.appspot.com",
  messagingSenderId: "260068152843",
  appId: "1:260068152843:web:2336283608fddc0e41d90e",
  measurementId: "G-HCK0JW6RYC",
};

// Initialize Firebase and Firestore
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth();

// function to add an event to Firestore database
export async function addEventToFirestore(event) {
  try {
    const eventData = {
      ...(event.eventName && { eventName: event.eventName }),
      ...(event.eventCategory && { eventCategory: event.eventCategory }),
      ...(event.eventLocation && { eventLocation: event.eventLocation }),
      ...(event.eventDate && { eventDate: event.eventDate }),
      ...(event.organiserName && { organiserName: event.organiserName }),
      ...(event.time && { time: event.time }),
      ...(event.wifi && { wifi: event.wifi }),
      createdAt: new Date().toISOString(),
    };

    const docRef = await addDoc(collection(db, "eventsCreated"), eventData);
    console.log("New event successfully added with ID: ", docRef.id);
    return docRef.id;
  } catch (error) {
    console.error("Error adding new event: ", error);
  }
}

// function to register user using
export async function registerUser(user) {
  try {
    // Create a new user account using Firebase Authentication
    const userCredential = await createUserWithEmailAndPassword(
      auth,
      user.email,
      user.password
    );

    // Log a success message for Firebase Authentication
    console.log(
      "New user has been successfully registered with Firebase Authentication."
    );

    // Extract the user object from the returned user credentials
    const firebaseUser = userCredential.user;

    // Prepare the user data to be stored in Firestore
    // Include the unique user ID generated by Firebase Authentication
    const userData = {
      uid: firebaseUser.uid,
      ...(user.username && { username: user.username }),
      ...(user.email && { email: user.email }),
      ...(user.preference && { preference: user.preference }),
    };

    // Store the prepared user data in Firestore
    await addDoc(collection(db, "UserList"), userData);
    console.log(
      "New user has been successfully registered and added to Firestore!"
    );
  } catch (error) {
    console.error("An error occurred while registering a new user: ", error);
  }
}

function formatDate(dateString) {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = date.getFullYear();
  const hours = date.getHours();
  const minutes = String(date.getMinutes()).padStart(2, "0");
  const ampm = hours >= 12 ? "pm" : "am";

  const formattedDate = `${day}/${month}/${year}`;
  const formattedTime = `${hours % 12 || 12}:${minutes} ${ampm}`;

  return { formattedDate, formattedTime };
}

// fetch data from Firestore
export async function fetchDataFromFirestore() {
  const querySnapshot = await getDocs(
    collection(db, "eventsCreated"),
    orderBy("createdAt")
  );
  const tableBody = document.getElementById("eventTableBody");

  querySnapshot.forEach((doc) => {
    const event = doc.data();
    const row = document.createElement("tr");

    const eventCell = document.createElement("td");
    eventCell.textContent = event.eventName;
    row.appendChild(eventCell);

    const organiserCell = document.createElement("td");
    organiserCell.textContent = event.organiserName;
    row.appendChild(organiserCell);

    const categoryCell = document.createElement("td");
    categoryCell.textContent = event.eventCategory;
    row.appendChild(categoryCell);

    const locationCell = document.createElement("td");
    locationCell.textContent = event.eventLocation;
    row.appendChild(locationCell);

    const { formattedDate, formattedTime } = formatDate(event.eventDate);
    const dateCell = document.createElement("td");
    dateCell.textContent = formattedDate;
    row.appendChild(dateCell);

    const timeCell = document.createElement("td");
    timeCell.textContent = formattedTime;
    row.appendChild(timeCell);

    const wifiCell = document.createElement("td");
    wifiCell.textContent = event.wifi;
    row.appendChild(wifiCell);

    // Create buttons
    const editButton = document.createElement("button");
    editButton.textContent = "Edit";
    editButton.addEventListener("click", function () {
      // Add your edit logic here
      const uid = doc.id;
      window.location.href = `edit_event.html?uid=${uid}`;
    });

    const displayButton = document.createElement("button");
    displayButton.textContent = "Display";
    displayButton.addEventListener("click", function () {
      // Add your display logic here
      const uid = doc.id;
      window.location.href = `display_event.html?uid=${uid}`;
    });

    // Create cells for buttons and append buttons
    const editCell = document.createElement("td");
    editCell.appendChild(editButton);
    row.appendChild(editCell);

    const displayCell = document.createElement("td");
    displayCell.appendChild(displayButton);
    row.appendChild(displayCell);

    tableBody.appendChild(row);
  });
}

export async function fetchAnEventData(uid) {
  const docRef = doc(db, "eventsCreated", uid);
  const docSnap = await getDoc(docRef);

  if (docSnap.exists()) {
    const eventData = docSnap.data();
    document.getElementById("eventName").textContent = eventData.eventName;
    document.getElementById("organiserName").textContent =
      eventData.organiserName;
    document.getElementById("eventCategory").textContent =
      eventData.eventCategory;
    document.getElementById("eventLocation").textContent =
      eventData.eventLocation;

    const { formattedDate, formattedTime } = formatDate(eventData.eventDate);
    document.getElementById("eventDate").textContent = formattedDate;
    document.getElementById("time").textContent = formattedTime;

    document.getElementById("wifi").textContent = `WiFi: ${eventData.wifi}`;
  } else {
    console.log("No such document!");
  }
}

export async function getEventDataForEdit(uid) {
  const docRef = doc(db, "eventsCreated", uid);
  const docSnap = await getDoc(docRef);

  if (docSnap.exists()) {
    const eventData = docSnap.data();
    document.getElementById("cename").value = eventData.eventName || "";
    document.getElementById("ceorganiser").value =
      eventData.organiserName || "";
    document.getElementById("cecategory").value = eventData.eventCategory || "";
    document.getElementById("celocation").value = eventData.eventLocation || "";
    document.getElementById("cedate").value = eventData.eventDate || "";
    document.getElementById("cewifi").value = eventData.wifi || "";
  } else {
    console.log("No such document!");
  }
}

function getQueryParam(param) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(param);
}

export async function updateEventInDB(eventData) {
  const uid = getQueryParam("uid");
  const eventRef = doc(db, "eventsCreated", uid);

  await setDoc(eventRef, eventData);
}

export async function deleteEventInDB(uid) {
  const eventRef = doc(db, "eventsCreated", uid);
  await deleteDoc(eventRef);
}
